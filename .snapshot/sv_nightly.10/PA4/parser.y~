%{
#include "parser-defs.h"

int yylex();
extern int yy_scan_string(const char* c);
int yyerror(const char* p)
{ 
  if(parser_error_fn != NULL) {
    parser_error_fn("At line " + int_to_string(curr_lineno) + ": " + string(p));
  }
  return 1;
};

 



%}
/* BISON Declarations */
%token 
TOKEN_READSTRING 
TOKEN_READINT 
TOKEN_PRINT 
TOKEN_ISNIL
TOKEN_HD 
TOKEN_TL 
TOKEN_CONS 
TOKEN_NIL 
TOKEN_DOT 
TOKEN_WITH 
TOKEN_LET 
TOKEN_PLUS 
TOKEN_MINUS 
TOKEN_IDENTIFIER 
TOKEN_TIMES 
TOKEN_DIVIDE 
TOKEN_INT 
TOKEN_LPAREN 
TOKEN_RPAREN 
TOKEN_AND 
TOKEN_OR 
TOKEN_EQ 
TOKEN_NEQ 
TOKEN_GT 
TOKEN_GEQ 
TOKEN_LT 
TOKEN_LEQ 
TOKEN_IF 
TOKEN_THEN 
TOKEN_ELSE 
TOKEN_LAMBDA 
TOKEN_FUN 
TOKEN_COMMA 
TOKEN_STRING 
TOKEN_ERROR 
TOKEN_IN



%nonassoc EXPR
%nonassoc TOKEN_PRINT 
%left TOKEN_EQ TOKEN_NEQ TOKEN_LT TOKEN_LEQ TOKEN_GT TOKEN_GEQ
%left TOKEN_AND TOKEN_OR
%left TOKEN_PLUS TOKEN_MINUS
%left TOKEN_TIMES TOKEN_DIVIDE
%nonassoc TOKEN_ISNIL
%right TOKEN_CONS
%nonassoc TOKEN_HD TOKEN_TL





%%



/*



program: expression
{
	res_expr = $$;
}



expression: TOKEN_INT 
{
  	string lexeme = GET_LEXEME($1);
  	long int val = string_to_int(lexeme);
  	Expression* e = AstInt::make(val);
  	$$ = e;
} 
|
TOKEN_STRING 
{
	string lexeme = GET_LEXEME($1);
  	Expression* e = AstString::make(lexeme);
  	$$ = e;
}
|
TOKEN_IDENTIFIER
{
	string lexeme = GET_LEXEME($1);
  	$$ =  AstIdentifier::make(lexeme);
}  
|
TOKEN_NIL
{
	$$ = AstNil::make();
}
|
TOKEN_PRINT expression
{
	$$ = AstUnOp::make(PRINT, $2);
}
|
TOKEN_READINT 
{
	$$ = AstRead::make(true);
}
|
TOKEN_READSTRING
{
	$$ = AstRead::make(false);
}
|
TOKEN_HD expression
{
    $$ = AstUnOp::make(HD, $2);
}
|
TOKEN_TL expression
{
	$$ = AstUnOp::make(TL, $2);
}
|

TOKEN_ISNIL expression 
{
	$$ = AstUnOp::make(ISNIL, $2);
}
|
expression TOKEN_CONS expression
{
	$$ = AstBinOp::make(CONS, $1, $3);
}
|
expression TOKEN_PLUS expression 
{
	$$ = AstBinOp::make(PLUS, $1, $3);
}

|
expression TOKEN_MINUS expression 
{
	$$ = AstBinOp::make(MINUS, $1, $3);
}
|
expression TOKEN_TIMES expression 
{
	$$ = AstBinOp::make(TIMES, $1, $3);
} 
|
expression TOKEN_DIVIDE expression 
{
	$$ = AstBinOp::make(DIVIDE, $1, $3);
}

|
expression TOKEN_AND expression 
{
	$$ = AstBinOp::make(AND, $1, $3);
}
|
expression TOKEN_OR expression 
{
	$$ = AstBinOp::make(OR, $1, $3);
}
|
expression TOKEN_EQ expression 
{
	$$ = AstBinOp::make(EQ, $1, $3);
}
|
expression TOKEN_NEQ expression
{
	$$ = AstBinOp::make(NEQ, $1, $3);
}
|
expression TOKEN_LT expression 
{
	$$ = AstBinOp::make(LT, $1, $3);
}
|
expression TOKEN_LEQ expression 
{
	$$ = AstBinOp::make(LEQ, $1, $3);
}
|
expression TOKEN_GT expression 
{
	$$ = AstBinOp::make(GT, $1, $3);
}
|
expression TOKEN_GEQ expression 
{
	$$ = AstBinOp::make(GEQ, $1, $3);
}
|
TOKEN_LET TOKEN_IDENTIFIER TOKEN_EQ expression TOKEN_IN  expression  %prec EXPR
{
	string id_name = GET_LEXEME($2);
	Expression* val = $4;
	Expression* body = $6;
	AstIdentifier* id = AstIdentifier::make(id_name);
	$$ = AstLet::make(id, val, body);	
} 
| TOKEN_LAMBDA identifier_list TOKEN_DOT expression %prec EXPR
{
	Expression* _ids = $2;
	assert(_ids->get_type() == AST_IDENTIFIER_LIST);
	AstIdentifierList* ids = static_cast<AstIdentifierList*>(_ids);
	$$ = AstLambda::make(ids, $4); 
} 
| TOKEN_LPAREN expression_application TOKEN_RPAREN
{
	$$ = $2;
}
| TOKEN_LPAREN expression TOKEN_RPAREN
{
	$$ = $2;
}
| TOKEN_FUN identifier TOKEN_WITH identifier_list TOKEN_EQ expression TOKEN_IN expression %prec EXPR
{
	Expression* _i = $2;
	assert(_i->get_type() == AST_IDENTIFIER);
	AstIdentifier* i = static_cast<AstIdentifier*>(_i);
	
	Expression* _i_list = $4;
	assert(_i_list->get_type() == AST_IDENTIFIER_LIST);
	AstIdentifierList* i_list = static_cast<AstIdentifierList*>(_i_list);
	
	AstLambda* l = AstLambda::make(i_list, $6);
	AstLet* res = AstLet::make(i, l, $8);
	$$ = res;
	
	//$$ = AstFunction::make(i, i_list, $6, $8); 
}
| TOKEN_IF expression TOKEN_THEN expression TOKEN_ELSE expression %prec EXPR
{
	$$ = AstBranch::make($2, $4, $6);
}
|
TOKEN_ERROR 
{
 
   string lexeme = GET_LEXEME($1);
   string error = "Lexing error: ";
   if(lexeme != "") error += lexeme;
   yyerror(error.c_str());
   YYERROR;
}




expression_application: expression expression
{
	AstExpressionList *l = AstExpressionList::make($1);
	l = l->append_exp($2);
	$$ = l;
}
|
expression_application expression
{
	Expression* _l = $1;
	assert(_l->get_type() == AST_EXPRESSION_LIST);
	AstExpressionList* l = static_cast<AstExpressionList*>(_l);
	$$ = l->append_exp($2);
}



identifier: TOKEN_IDENTIFIER
{
	string name = GET_LEXEME($1);
	$$ = AstIdentifier::make(name);
}


identifier_list: identifier
{
	Expression* e = $1;
	assert(e->get_type() == AST_IDENTIFIER);
	AstIdentifier* id = static_cast<AstIdentifier*>(e);
	$$ = AstIdentifierList::make(id);
}
|
identifier_list TOKEN_COMMA identifier
{
	Expression* _ids = $1;
	assert(_ids->get_type() == AST_IDENTIFIER_LIST);
	AstIdentifierList* ids = static_cast<AstIdentifierList*>(_ids);
	
	Expression* e = $3;
	assert(e->get_type() == AST_IDENTIFIER);
	AstIdentifier* id = static_cast<AstIdentifier*>(e);
	$$ = ids->append_id(id);
	 
	
}

  */

  
 

input:   
input TOKEN_READSTRING
{
	cout << "TOKEN_READSTRING" << endl;
}
|
input TOKEN_READINT
{
	cout << "TOKEN_READINT" << endl;
}
|
input TOKEN_PRINT 
{
	cout << "TOKEN_PRINT" << endl;
}
|
input TOKEN_ISNIL
{
	cout << "TOKEN_ISNIL" << endl;
}
|
input TOKEN_HD
{
	cout << "TOKEN_HD" << endl;
}
| 
input TOKEN_TL 
{
	cout << "TOKEN_TL" << endl;
}
|
input TOKEN_CONS
{
	cout << "TOKEN_CONS" << endl;
}
|
input TOKEN_NIL
{
	cout << "TOKEN_NIL" << endl;
}
|
input TOKEN_DOT 
{
	cout << "TOKEN_DOT" << endl;
}
|
input TOKEN_WITH 
{
	cout << "TOKEN_WITH" << endl;
}
|
input TOKEN_LET
{
	cout << "TOKEN_LET" << endl;
}
|
input TOKEN_PLUS
      {
      cout << "TOKEN_PLUS" << endl;
      }
  | 
 input TOKEN_MINUS
      {
      cout << "TOKEN_MINUS" << endl;
      }
|
input TOKEN_IDENTIFIER
{
	string lexeme = GET_LEXEME($2);
	cout << "TOKEN_IDENTIFIER: " << lexeme << endl;
}
| 
 input TOKEN_TIMES
      {
      cout << "TOKEN_TIMES" << endl;
      }
|
 input TOKEN_DIVIDE
      {
      cout << "TOKEN_DIVIDE" << endl;
      }
|
input TOKEN_INT 
{
	string lexeme = GET_LEXEME($2);
	cout << "TOKEN_INT: " << lexeme << endl;
}
|
input TOKEN_LPAREN
{
	cout << "TOKEN_LPAREN" << endl;
}
|
input TOKEN_RPAREN 
{
	cout << "TOKEN_RPAREN" << endl;
}
|
input TOKEN_AND 
{
	cout << "TOKEN_AND" << endl;
}
|
input TOKEN_OR 
{
	cout << "TOKEN_OR" << endl;
}
|
input TOKEN_EQ 
{
	cout << "TOKEN_EQ" << endl;
}
| input TOKEN_NEQ 
{
	cout << "TOKEN_NEQ" << endl;
}
|
input TOKEN_GT
{
	cout << "TOKEN_GT" << endl;
}
|
input TOKEN_GEQ
{
	cout << "TOKEN_GEQ" << endl;
}
|
input TOKEN_LT
{
	cout << "TOKEN_LT" << endl;
}
|
input TOKEN_LEQ
{
	cout << "TOKEN_LEQ" << endl;
}
|
input TOKEN_IF 
{
	cout << "TOKEN_IF" << endl;
}
| 
input TOKEN_THEN
{
	cout << "TOKEN_THEN" << endl;
}
| 
input TOKEN_ELSE
{
	cout << "TOKEN_ELSE" << endl;
}
|
input TOKEN_LAMBDA
{
	cout << "TOKEN_LAMBDA" << endl;
}
| 
input TOKEN_FUN
{
	cout << "TOKEN_FUN" << endl;
}
|
input TOKEN_COMMA
{
	cout << "TOKEN_COMMA" << endl;
}
|
input TOKEN_STRING
{
	string lexeme = GET_LEXEME($2);
	cout << "TOKEN_STRING: " << lexeme << endl;
}
|
input TOKEN_IN
{
	cout << "TOKEN_IN" << endl;
}
|
input TOKEN_ERROR
      {
    
      yyerror("Lexing Error");
      YYERROR;
      }

| 
{

}