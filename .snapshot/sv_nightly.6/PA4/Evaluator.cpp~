
#include "Evaluator.h"
#include "ConstantType.h"
#include "VariableType.h"
#include "FunctionType.h"




#include "ast/expression.h"

void report_error(Expression* e, const string & s)
{
	cout << "Run-time error in expression " << e->to_value() << endl;
	cout << s << endl;
	exit(1);

}



Evaluator::Evaluator()
{
	//delete me
	Type* t1 = ConstantType::make("Int");
	Type* t2 = ConstantType::make("String");
	Type* t3 = ConstantType::make("Int");
	Type* var1 = VariableType::make("x");
	cout << t1->to_string() << " " << t1 << endl;
	cout << t2->to_string() << " " << t2 << endl;
	cout << t3->to_string() << " " << t3 << endl;
	vector<Type*> v1;
	v1.push_back(var1);
	v1.push_back(t2);

	vector<Type*> v2;
	v2.push_back(t3);
	v2.push_back(t2);

	Type* t4 = FunctionType::make("fun", v1);
	Type* t5 = FunctionType::make("fun", v2);
	cout << t4->to_string() << " " << t4 << endl;
	cout << t5->to_string() << " " << t5 << endl;

	{
		Type* t1 = t4;
		Type* t2 = t5;

		cout << "Type 1:" << t1->to_string() << "Rep: " << t1->find()->to_string() << endl;
		cout <<	"Type 2:" << t2->to_string() << "Rep: " << t2->find()->to_string() << endl;

		cout << "unify: " << t1->unify(t2) << endl;

		cout << "Type 1:" << t1->to_string() << "Rep: " << t1->find()->to_string() << endl;
		cout <<	"Type 2:" << t2->to_string() << "Rep: " << t2->find()->to_string() << endl;
	}
cout << "Type 1:" << t1->to_string() << "Rep: " << t1->find()->to_string() << endl;
		cout <<	"Type 2:" << var1->to_string() << "Rep: " << var1->find()->to_string() << endl;



	//delete me end



	sym_tab.push();
	c = 0;

}

Expression* Evaluator::eval_unop(AstUnOp* b)
{





	Expression* e = b->get_expression();
	Expression* eval_e = eval(e);

	if(b->get_unop_type() == PRINT) {
		if(eval_e->get_type() == AST_STRING) {
			AstString* s = static_cast<AstString*>(eval_e);
			cout << s->get_string() << endl;
		}
		else cout << eval_e->to_value() << endl;
		return AstInt::make(0);
	}




	if(b->get_unop_type() == ISNIL) {
		if(eval_e->get_type() == AST_NIL)
			return AstInt::make(1);
		return AstInt::make(0);
	}


	if(eval_e->get_type() != AST_LIST) {


		if(b->get_unop_type() == HD){
			return eval_e;
		}
		if(b->get_unop_type() == TL) return AstNil::make();

		assert(false);

	}

	AstList* l = static_cast<AstList*>(eval_e);
	if(b->get_unop_type() == HD) return l->get_hd();
	if(b->get_unop_type() == TL) return l->get_tl();
	assert(false);


}

Expression* Evaluator::eval_binop(AstBinOp* b)
{
	Expression* e1 = b->get_first();
	Expression* e2 = b->get_second();

	Expression* eval1 = eval(e1);
	Expression* eval2 = eval(e2);


	if(b->get_binop_type() == CONS) {

		return AstList::make(eval1, eval2);
	}


	if(eval1->get_type() == AST_LIST || eval2->get_type() == AST_LIST) {
		report_error(b, "Binpo @ is the only legal binop for lists");
	}



	if(eval1->get_type() != AST_INT && eval1->get_type() != AST_STRING) {
		return AstBinOp::make(b->get_binop_type(), eval1, eval2);
	}
	if(eval2->get_type() != AST_INT && eval2->get_type() != AST_STRING) {

		return AstBinOp::make(b->get_binop_type(), eval1, eval2);
	}
	if(eval1->get_type() != eval2->get_type()) {
		report_error(b, "Binop can only be applied to expressions of same type");
	}


	if(eval1->get_type() == AST_INT){
		if(b->get_binop_type() == PLUS) {
			AstInt* i1 = static_cast<AstInt*>(eval1);
			AstInt* i2 = static_cast<AstInt*>(eval2);
			return AstInt::make(i1->get_int() + i2->get_int());
		}
		if(b->get_binop_type() == MINUS) {
			AstInt* i1 = static_cast<AstInt*>(eval1);
			AstInt* i2 = static_cast<AstInt*>(eval2);
			return AstInt::make(i1->get_int() - i2->get_int());
		}
		if(b->get_binop_type() == TIMES) {
			AstInt* i1 = static_cast<AstInt*>(eval1);
			AstInt* i2 = static_cast<AstInt*>(eval2);
			return AstInt::make(i1->get_int() * i2->get_int());
		}
		if(b->get_binop_type() == DIVIDE) {
			AstInt* i1 = static_cast<AstInt*>(eval1);
			AstInt* i2 = static_cast<AstInt*>(eval2);
			return AstInt::make(i1->get_int() / i2->get_int());
		}
		if(b->get_binop_type() == AND) {
			AstInt* i1 = static_cast<AstInt*>(eval1);
			AstInt* i2 = static_cast<AstInt*>(eval2);
			return AstInt::make(i1->get_int() && i2->get_int());
		}
		if(b->get_binop_type() == OR) {
			AstInt* i1 = static_cast<AstInt*>(eval1);
			AstInt* i2 = static_cast<AstInt*>(eval2);
			return AstInt::make(i1->get_int() || i2->get_int());
		}
		if(b->get_binop_type() == EQ) {
			AstInt* i1 = static_cast<AstInt*>(eval1);
			AstInt* i2 = static_cast<AstInt*>(eval2);
			return AstInt::make(i1->get_int() == i2->get_int());
		}
		if(b->get_binop_type() == NEQ) {
			AstInt* i1 = static_cast<AstInt*>(eval1);
			AstInt* i2 = static_cast<AstInt*>(eval2);
			return AstInt::make(i1->get_int() != i2->get_int());
		}
		if(b->get_binop_type() == LT) {
			AstInt* i1 = static_cast<AstInt*>(eval1);
			AstInt* i2 = static_cast<AstInt*>(eval2);
			return AstInt::make(i1->get_int() < i2->get_int());
		}
		if(b->get_binop_type() == LEQ) {
			AstInt* i1 = static_cast<AstInt*>(eval1);
			AstInt* i2 = static_cast<AstInt*>(eval2);
			return AstInt::make(i1->get_int() <= i2->get_int());
		}
		if(b->get_binop_type() == GT) {
			AstInt* i1 = static_cast<AstInt*>(eval1);
			AstInt* i2 = static_cast<AstInt*>(eval2);
			return AstInt::make(i1->get_int() > i2->get_int());
		}
		if(b->get_binop_type() == EQ) {
			AstInt* i1 = static_cast<AstInt*>(eval1);
			AstInt* i2 = static_cast<AstInt*>(eval2);
			return AstInt::make(i1->get_int() >= i2->get_int());
		}

	}
	else {
		if(b->get_binop_type() == PLUS) {
			AstString* s1 = static_cast<AstString*>(eval1);
			AstString* s2 = static_cast<AstString*>(eval2);
			return AstString::make(s1->get_string() + s2->get_string());
		}
		if(b->get_binop_type() == EQ) {
			AstString* s1 = static_cast<AstString*>(eval1);
			AstString* s2 = static_cast<AstString*>(eval2);
			if(s1 == s2) return AstInt::make(1);
			else return AstInt::make(0);
		}
		if(b->get_binop_type() == NEQ) {
			AstString* s1 = static_cast<AstString*>(eval1);
			AstString* s2 = static_cast<AstString*>(eval2);
			if(s1 != s2) return AstInt::make(1);
			else return AstInt::make(0);
		}
		report_error(b, "Binop " + AstBinOp::binop_type_to_string(b->get_binop_type()) +
				" cannot be applied to strings");

	}

	assert(false);

}


Expression* Evaluator::eval_expression_list(AstExpressionList* l)
{
	assert(l->get_expressions().size() > 0);
	if(l->get_expressions().size() == 1) {
		return eval(l->get_expressions()[0]);
	}

	Expression* e1 = l->get_expressions()[0];
	Expression* e2 = l->get_expressions()[1];


	Expression* eval_e1 = eval(e1);
	if(eval_e1->get_type() != AST_LAMBDA) {
		report_error(l, "Only lambda expressions can be applied to other expressions");
	}
	AstLambda* lambda = static_cast<AstLambda*>(eval_e1);
	Expression* eval_e2 = e2;
	Expression* sub_e = lambda->get_body()->substitute(lambda->get_formal(),
			eval_e2);

	Expression* e3 = eval(sub_e);
	AstExpressionList* new_l = AstExpressionList::make(e3);

	vector<Expression*> rest;
	rest.push_back(new_l);


	for(int i = 2; i < (int)l->get_expressions().size(); i++) {
		rest.push_back(l->get_expressions()[i]);
	}

	return eval(AstExpressionList::make(rest));
}



Expression* Evaluator::eval(Expression* e)
{


	Expression* res_exp = NULL;
	switch(e->get_type())
	{
	case AST_BINOP:
	{
		AstBinOp* b = static_cast<AstBinOp*>(e);
		res_exp = eval_binop(b);
		break;
	}
	case AST_UNOP:
	{
		AstUnOp* b = static_cast<AstUnOp*>(e);
		res_exp = eval_unop(b);
		break;
	}
	case AST_BRANCH:
	{
		AstBranch* b = static_cast<AstBranch*>(e);
		Expression* p = eval(b->get_pred());
		if(p->get_type() != AST_INT){
			report_error(b, "Predicate in conditional must be an integer");
			break;
		}
		AstInt* i = static_cast<AstInt*>(p);
		if(i->get_int()!=0) {
			res_exp = eval(b->get_then_exp());
			break;
		}
		else
		{
			res_exp = eval(b->get_else_exp());
			break;
		}
	}
	case AST_EXPRESSION_LIST:
	{
		AstExpressionList* l = static_cast<AstExpressionList*>(e);
		res_exp = eval_expression_list(l);
		break;


	}
	case AST_IDENTIFIER:
	{
		AstIdentifier* id = static_cast<AstIdentifier*>(e);

		if(sym_tab.find(id) == NULL) {
			report_error(e, "Identifier " + id->to_value() + " is not bound in "
					"current context ");
		}
		res_exp = sym_tab.find(id);

		break;
	}
	case AST_INT:
	{
		res_exp = e;
		break;
	}
	case AST_LAMBDA:
	{
		res_exp = e;
		break;
	}
	case AST_LET:
	{
		AstLet* l = static_cast<AstLet*>(e);
		Expression* eval_v = eval(l->get_val());
		sym_tab.push();
		sym_tab.add(l->get_id(), eval_v);
		Expression* res = eval(l->get_body());
		sym_tab.pop();
		res_exp =  res;
		break;

	}
	case AST_STRING:
	{
		res_exp = e;
		break;
	}
	case AST_NIL:
	{
		res_exp = AstNil::make();
		break;
	}
	case AST_LIST:
	{
		res_exp = e;
		break;
	}
	case AST_READ:
	{
		AstRead* r = static_cast<AstRead*>(e);
		string input;
		getline(cin, input);
		if(r->read_integer()) {
			return AstInt::make(string_to_int(input));
		}
		return AstString::make(input);


		break;
	}
	default:
		assert(false);


	}
	return res_exp;
}
